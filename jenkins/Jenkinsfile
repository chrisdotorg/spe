pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = 'docker-hub-credentials'
        IMAGE_PREFIX = 'richdotcom101'
        INVENTORY_FILE = 'ansible/inventory.ini'
        PLAYBOOK_FILE = 'ansible/deploy.yml'
    }

    stages {
        stage('Checkout: cloning the repository') {
            steps {
                echo 'git clone'
                checkout scm
            }
        }

        stage('Building docker image') {
            steps {
                script {
                    def services = [
                        [name: 'postfix', path: 'docker/postfix'],
                        [name: 'dovecot', path: 'docker/dovecot'],
                        [name: 'admin', path: 'docker/admin']
                    ]

                    for (svc in services) {
                        def imageTag = "${IMAGE_PREFIX}/${svc.name}:latest"
                        echo "building ${imageTag} from ${svc.path}"
                        docker.build(imageTag, svc.path)
                    }
                }
            }
        }

        stage('Docker image to docker hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
                        def services = ['postfix', 'dovecot', 'admin']
                        for (svc in services) {
                            def imageTag = "${IMAGE_PREFIX}/${svc}:latest"
                            echo "Pushing ${imageTag} to docker hub "
                            docker.image(imageTag).push()
                        }
                    }
                }
            }
        }

        stage('Requirement checkout for ansible') {
            steps {
                sh '''
                sudo apt-get update
                sudo apt-get install -y ansible python3-pip
                pip3 install docker-compose || true
                '''
            }
        }
        stage('Deploy with Ansible') {
            steps {
                sh '''
                ansible-playbook -i ${INVENTORY_FILE} ${PLAYBOOK_FILE}
                '''
            }
        }
        stage('Kubernetes Orchestratio'){
            steps{
                script{
                    echo 'new step'
                }
            }
        }
    }
        post {
        success {
            echo "deployment successful"
        }
        failure {
            echo "deployment failed"
        }
    }
}
